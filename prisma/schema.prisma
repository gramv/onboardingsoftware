generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String           @id @default(cuid())
  name        String           @unique
  type        String
  parentId    String?          @map("parent_id")
  address     String?
  settings    String           @default("{}")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  jobPostings JobPosting[]
  parent      Organization?    @relation("OrganizationHierarchy", fields: [parentId], references: [id])
  children    Organization[]   @relation("OrganizationHierarchy")
  users       User[]

  @@map("organizations")
}

model User {
  id                       String                    @id @default(cuid())
  email                    String                    @unique
  passwordHash             String                    @map("password_hash")
  role                     String
  organizationId           String                    @map("organization_id")
  firstName                String                    @map("first_name")
  lastName                 String                    @map("last_name")
  phone                    String?
  languagePreference       String                    @default("en") @map("language_preference")
  isActive                 Boolean                   @default(true) @map("is_active")
  mfaEnabled               Boolean                   @default(false) @map("mfa_enabled")
  mfaSecret                String?                   @map("mfa_secret")
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  announcementReadReceipts AnnouncementReadReceipt[]
  employee                 Employee?
  reviewedForms            FormSubmission[]          @relation("FormReviewer")
  reviewedApplications     JobApplication[]          @relation("ApplicationReviewer")
  createdJobPostings       JobPosting[]              @relation("JobPostingCreator")
  receivedMessages         Message[]                 @relation("MessageReceiver")
  sentMessages             Message[]                 @relation("MessageSender")
  createdScheduleEntries   ScheduleEntry[]           @relation("ScheduleCreator")
  organization             Organization              @relation(fields: [organizationId], references: [id])

  @@map("users")
}

model Employee {
  id                 String              @id @default(cuid())
  userId             String              @unique @map("user_id")
  employeeId         String              @unique @map("employee_id")
  ssnEncrypted       String?             @map("ssn_encrypted")
  dateOfBirth        DateTime?           @map("date_of_birth")
  hireDate           DateTime            @map("hire_date")
  terminationDate    DateTime?           @map("termination_date")
  position           String?
  department         String?
  hourlyRate         Float?              @map("hourly_rate")
  employmentStatus   String              @default("active") @map("employment_status")
  rehireEligible     Boolean             @default(true) @map("rehire_eligible")
  managerRating      Int?                @map("manager_rating")
  emergencyContact   String?             @map("emergency_contact")
  address            String?
  schedule           String?
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  documents          Document[]
  user               User                @relation(fields: [userId], references: [id])
  formSubmissions    FormSubmission[]
  onboardingSessions OnboardingSession[]
  scheduleEntries    ScheduleEntry[]

  @@map("employees")
}

model Document {
  id            String       @id @default(cuid())
  employeeId    String       @map("employee_id")
  documentType  String       @map("document_type")
  documentName  String?      @map("document_name")
  filePath      String?      @map("file_path")
  fileSize      Int?         @map("file_size")
  mimeType      String?      @map("mime_type")
  ocrData       String?      @map("ocr_data")
  isSigned      Boolean      @default(false) @map("is_signed")
  signedAt      DateTime?    @map("signed_at")
  signatureData String?      @map("signature_data")
  version       Int          @default(1)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  employee      Employee     @relation(fields: [employeeId], references: [id])

  @@map("documents")
}

model ScheduleEntry {
  id             String       @id @default(cuid())
  employeeId     String       @map("employee_id")
  date           DateTime
  startTime      String       @map("start_time")
  endTime        String       @map("end_time")
  breakDuration  Int          @default(0) @map("break_duration")
  isWorkDay      Boolean      @default(true) @map("is_work_day")
  scheduleType   String       @default("regular") @map("schedule_type")
  effectiveFrom  DateTime     @map("effective_from")
  effectiveUntil DateTime?    @map("effective_until")
  createdBy      String       @map("created_by")
  notes          String?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  creator        User         @relation("ScheduleCreator", fields: [createdBy], references: [id])
  employee       Employee     @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, date, effectiveFrom])
  @@map("schedule_entries")
}

model OnboardingSession {
  id                 String           @id @default(cuid())
  employeeId         String?          @map("employee_id")
  token              String           @unique
  languagePreference String           @default("en") @map("language_preference")
  currentStep        String?          @map("current_step")
  formData           String           @default("{}") @map("form_data")
  status             String           @default("in_progress")
  expiresAt          DateTime         @map("expires_at")
  completedAt        DateTime?        @map("completed_at")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  applicationId      String?          @map("application_id")
  email              String?
  firstName          String?          @map("first_name")
  jobTitle           String?          @map("job_title")
  lastName           String?          @map("last_name")
  organizationId     String?          @map("organization_id")
  organizationName   String?          @map("organization_name")
  jobApplication     JobApplication?  @relation(fields: [applicationId], references: [id])
  employee           Employee?        @relation(fields: [employeeId], references: [id])

  @@map("onboarding_sessions")
}

model Message {
  id         String    @id @default(cuid())
  senderId   String    @map("sender_id")
  receiverId String?   @map("receiver_id")
  subject    String?
  content    String
  isRead     Boolean   @default(false) @map("is_read")
  readAt     DateTime? @map("read_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  receiver   User?     @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender     User      @relation("MessageSender", fields: [senderId], references: [id])

  @@map("messages")
}

model Announcement {
  id           String                    @id @default(cuid())
  title        String
  content      String
  priority     String                    @default("normal")
  targetRoles  String                    @map("target_roles")
  targetOrgs   String                    @map("target_orgs")
  isActive     Boolean                   @default(true) @map("is_active")
  expiresAt    DateTime?                 @map("expires_at")
  createdAt    DateTime                  @default(now()) @map("created_at")
  updatedAt    DateTime                  @updatedAt @map("updated_at")
  readReceipts AnnouncementReadReceipt[]

  @@map("announcements")
}

model AnnouncementReadReceipt {
  id             String       @id @default(cuid())
  announcementId String       @map("announcement_id")
  userId         String       @map("user_id")
  readAt         DateTime     @default(now()) @map("read_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([announcementId, userId])
  @@map("announcement_read_receipts")
}

model FormSubmission {
  id               String       @id @default(cuid())
  formId           String       @unique @map("form_id")
  employeeId       String       @map("employee_id")
  formType         String       @map("form_type")
  language         String       @default("en")
  data             String       @default("{}")
  status           String       @default("draft")
  version          String       @default("1.0")
  validationErrors String?      @map("validation_errors")
  submittedAt      DateTime?    @map("submitted_at")
  reviewedAt       DateTime?    @map("reviewed_at")
  reviewedBy       String?      @map("reviewed_by")
  pdfPath          String?      @map("pdf_path")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  employee         Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  reviewer         User?        @relation("FormReviewer", fields: [reviewedBy], references: [id])

  @@map("form_submissions")
}

model JobPosting {
  id             String           @id @default(cuid())
  organizationId String           @map("organization_id")
  title          String
  description    String
  department     String
  position       String
  salaryRange    String           @map("salary_range")
  requirements   String
  benefits       String
  isActive       Boolean          @default(true) @map("is_active")
  expiresAt      DateTime         @map("expires_at")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  createdBy      String           @map("created_by")
  applications   JobApplication[]
  creator        User             @relation("JobPostingCreator", fields: [createdBy], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("job_postings")
}

model JobApplication {
  id                 String              @id @default(cuid())
  jobPostingId       String              @map("job_posting_id")
  firstName          String              @map("first_name")
  lastName           String              @map("last_name")
  email              String
  phone              String
  address            String
  resumeText         String?             @map("resume_text")
  experience         String?
  education          String?
  additionalInfo     String?             @map("additional_info")
  status             String              @default("pending")
  appliedAt          DateTime            @default(now()) @map("applied_at")
  reviewedAt         DateTime?           @map("reviewed_at")
  reviewedBy         String?             @map("reviewed_by")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  jobPosting         JobPosting          @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  reviewer           User?               @relation("ApplicationReviewer", fields: [reviewedBy], references: [id])
  onboardingSessions OnboardingSession[]

  @@map("job_applications")
}
